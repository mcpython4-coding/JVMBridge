{
  "annotations": {
    "report": [
      "java/lang/annotation/Annotation",
      "javax/annotation/CheckForNull",
      "javax/annotation/meta/TypeQualifierNickname"
    ],
    "skip": [
      "javax/annotation/Nullable",
      "javax/annotation/Nonnull",
      "java/lang/annotation/Documented",
      "javax/annotation/meta/TypeQualifierDefault",
      "javax/annotation/ParametersAreNonnullByDefault",
      "org/jetbrains/annotations/NotNull",
      "org/jetbrains/annotations/NonNls",
      "org/jetbrains/annotations/Nullable",
      "edu/umd/cs/findbugs/annotations/Nullable"
    ],
    "track": [
      "java/lang/Deprecated",
      "java/lang/annotation/Retention",
      "java/lang/annotation/Target",
      "java/lang/FunctionalInterface",
      "java/lang/SafeVarargs",
      "java/lang/annotation/Repeatable",
      "javax/annotation/concurrent/Immutable",
      "java/lang/annotation/Inherited",
      "javax/annotation/CheckReturnValue",
      "javax/annotation/Nonnegative"
    ]
  },
  "classes": {
    "java/awt/Rectangle": {
      "methods": {
        "<init>(IIII)V": {}
      }
    },
    "java/beans/ConstructorProperties": {
      "annotation": "track"
    },
    "java/io/File": {
      "methods": {
        "<init>(Ljava/io/File;Ljava/lang/String;)V": {
          "wraps": "a0.fields.update({'path': shared.home + '/' + a1 + '/' + a2})"
        },
        "exists()Z": {
          "wraps": "__import__('os').path.exists(a0.fields['path'] if not isinstance(a0, str) else a0)"
        }
      }
    },
    "java/io/PrintStream": {
      "methods": {
        "println(Ljava/lang/String;)V": {}
      }
    },
    "java/io/Serializable": {},
    "java/lang/Boolean": {
      "methods": {
        "booleanValue()Z": {
          "wraps": "a0"
        },
        "valueOf(Z)Ljava/lang/Boolean;": {
          "wraps": "a0"
        }
      },
      "wraps": ":bool"
    },
    "java/lang/Class": {
      "methods": {
        "desiredAssertionStatus()Z": {
          "wraps": "True"
        },
        "forName(Ljava/lang/String;)Ljava/lang/Class;": {},
        "getClassLoader()Ljava/lang/ClassLoader;": {},
        "getEnumConstants()[Ljava/lang/Object;": {},
        "getField(Ljava/lang/String;)Ljava/lang/reflect/Field;": {},
        "getName()Ljava/lang/String;": {
          "wraps": "a0.name"
        },
        "newInstance()Ljava/lang/Object;": {}
      }
    },
    "java/lang/ClassLoader": {
      "methods": {
        "getSystemResources(Ljava/lang/String;)Ljava/util/Enumeration;": {}
      }
    },
    "java/lang/Cloneable": {},
    "java/lang/Comparable": {},
    "java/lang/Enum": {
      "attributes": {
        "ordinal": {}
      },
      "methods": {
        "<init>(Ljava/lang/String;I)V": {
          "wraps": "a0.fields.update({'ordinal': a2})"
        },
        "name()Ljava/lang/String;": {},
        "ordinal()I": {
          "wraps": "a0.fields['ordinal']"
        }
      },
      "super": "java/lang/Class"
    },
    "java/lang/Error": {
      "wraps": ":Exception"
    },
    "java/lang/Exception": {
      "wraps": ":Exception"
    },
    "java/lang/InheritableThreadLocal": {
      "methods": {
        "<init>()V": {
          "no effect": true
        }
      }
    },
    "java/lang/Integer": {
      "methods": {
        "equals(Ljava/lang/Object;)Z": {
          "wraps": "a0 == a1"
        },
        "intValue()I": {
          "wraps": "a0"
        },
        "toString(I)Ljava/lang/String;": {
          "wraps": "str(a0)"
        },
        "valueOf(I)Ljava/lang/Integer;": {
          "wraps": "a0"
        }
      },
      "wraps": ":int"
    },
    "java/lang/Object": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "get()Ljava/lang/Object;": {
          "wraps": "a0"
        },
        "getClass()Ljava/lang/Class;": {
          "wraps": "cls if not isinstance(a0, jvm.api.AbstractJavaClass) else cls.get_class()"
        }
      },
      "wraps": ":object"
    },
    "java/lang/RuntimeException": {
      "attributes": {
        "message": {}
      },
      "methods": {
        "<init>(Ljava/lang/String;)V": {
          "wraps": "a0.fields.update({'message': a1})"
        },
        "printStackTrace()V": {
          "wraps": "print(a0.fields['message'])"
        }
      }
    },
    "java/lang/String": {
      "methods": {
        "equals(Ljava/lang/Object;)Z": {},
        "equalsIgnoreCase(Ljava/lang/String;)Z": {
          "wraps": "a0.lower() == a1.lower()"
        },
        "format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;": {
          "wraps": "a0 % tuple(a1)"
        },
        "getBytes(Ljava/nio/charset/Charset;)[B": {
          "wraps": "a0.encode('utf-8')"
        }
      }
    },
    "java/lang/StringBuilder": {
      "attributes": {
        "underlying": {}
      },
      "methods": {
        "<init>()V": {
          "wraps": "a0.fields.update({'underlying': []})"
        },
        "append(I)Ljava/lang/StringBuilder;": {
          "wraps": "a0 if a0.fields['underlying'].append(str(a1)) else a0"
        },
        "append(Ljava/lang/Object;)Ljava/lang/StringBuilder;": {
          "wraps": "a0 if a0.fields['underlying'].append(str(a1)) else a0"
        },
        "append(Ljava/lang/String;)Ljava/lang/StringBuilder;": {
          "wraps": "a0 if a0.fields['underlying'].append(a1) else a0"
        },
        "toString()Ljava/lang/String;": {
          "wraps": "''.join(a0.fields['underlying'])"
        }
      }
    },
    "java/lang/System": {
      "attributes": {
        "err": {
          "access": "static"
        }
      },
      "methods": {
        "getProperty(Ljava/lang/String;)Ljava/lang/String;": {},
        "setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;": {
          "access": "static"
        }
      }
    },
    "java/lang/ThreadLocal": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "get()Ljava/lang/Object;": {
          "wraps": "a0"
        },
        "withInitial(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;": {
          "wraps": "a0()"
        }
      }
    },
    "java/lang/annotation/ElementType": {
      "attributes": {
        "ANNOTATION_TYPE": {
          "access": "static enum"
        },
        "CONSTRUCTOR": {
          "access": "static enum"
        },
        "FIELD": {
          "access": "static enum"
        },
        "LOCAL_VARIABLE": {
          "access": "static enum"
        },
        "METHOD": {
          "access": "static enum"
        },
        "PACKAGE": {
          "access": "static enum"
        },
        "PARAMETER": {
          "access": "static enum"
        },
        "TYPE": {
          "access": "static enum"
        },
        "TYPE_PARAMETER": {
          "access": "static enum"
        },
        "TYPE_USE": {
          "access": "static enum"
        }
      },
      "class type": "enum"
    },
    "java/lang/annotation/RetentionPolicy": {
      "attributes": {
        "CLASS": {
          "access": "static enum"
        },
        "RUNTIME": {
          "access": "static enum"
        },
        "SOURCE": {}
      },
      "class type": "enum"
    },
    "java/lang/invoke/StringConcatFactory": {
      "methods": {
        "makeConcatWithConstants(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;": {}
      }
    },
    "java/lang/reflect/Field": {
      "methods": {
        "get(Ljava/lang/Object;)Ljava/lang/Object;": {}
      }
    },
    "java/lang/reflect/Method": {
      "methods": {
        "accept(Ljava/lang/Object;)V": {
          "wraps": "a0(a1)"
        }
      }
    },
    "java/math/RoundingMode": {
      "attributes": {
        "DOWN": {}
      }
    },
    "java/nio/charset/StandardCharsets": {
      "attributes": {
        "UTF_8": {
          "access": "static enum"
        }
      },
      "class type": "enum"
    },
    "java/nio/file/Path": {
      "methods": {
        "toFile()Ljava/io/File;": {
          "wraps": "a0"
        }
      }
    },
    "java/nio/file/Paths": {
      "methods": {
        "get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;": {
          "wraps": "a0 + '/' + '/'.join(a1)"
        }
      }
    },
    "java/text/DecimalFormat": {
      "methods": {
        "<init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;)V": {},
        "setRoundingMode(Ljava/math/RoundingMode;)V": {}
      }
    },
    "java/text/DecimalFormatSymbols": {
      "methods": {
        "getInstance(Ljava/util/Locale;)Ljava/text/DecimalFormatSymbols;": {}
      }
    },
    "java/time/Duration": {
      "methods": {
        "ofMillis(J)Ljava/time/Duration;": {
          "wraps": "a0"
        },
        "toNanos()J": {
          "wraps": "round(a0 * 1000)"
        }
      }
    },
    "java/util/ArrayDeque": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "isEmpty()Z": {
          "wraps": "True"
        }
      }
    },
    "java/util/ArrayList": {
      "hard wrap": true,
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "add(Ljava/lang/Object;)Z": {
          "wraps": "a0.underlying.append(a1) or True"
        }
      },
      "wraps": ":list"
    },
    "java/util/Arrays": {
      "methods": {
        "asList([Ljava/lang/Object;)Ljava/util/List;": {}
      }
    },
    "java/util/Collection": {
      "methods": {
        "contains(Ljava/lang/Object;)Z": {
          "wraps": "a1 in a0"
        },
        "forEach(Ljava/util/function/Consumer;)V": {
          "wraps": "list(map(a1, a0)) == 0"
        },
        "iterator()Ljava/util/Iterator;": {
          "wraps": "iter(a0)"
        },
        "stream()Ljava/util/stream/Stream;": {
          "wraps": "list(a0)"
        }
      }
    },
    "java/util/Collections": {
      "methods": {
        "addAll(Ljava/util/Collection;[Ljava/lang/Object;)Z": {
          "wraps": "(a0 if isinstance(a0, list) else a0.fields['underlying']).extend(a1)"
        },
        "emptyList()Ljava/util/List;": {
          "wraps": "[]"
        },
        "shuffle(Ljava/util/List;)V": {
          "wraps": "__import__('random').shuffle(a0 if isinstance(a0, list) else a0.fields['underlying'])"
        }
      }
    },
    "java/util/Comparator": {
      "methods": {
        "comparing(Ljava/util/function/Function;)Ljava/util/Comparator;": {},
        "reversed()Ljava/util/Comparator;": {},
        "thenComparing(Ljava/util/function/Function;)Ljava/util/Comparator;": {}
      }
    },
    "java/util/EnumMap": {
      "methods": {
        "<init>(Ljava/lang/Class;)V": {},
        "computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;": {}
      }
    },
    "java/util/EnumSet": {
      "methods": {
        "noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;": {
          "wraps": "set()"
        }
      }
    },
    "java/util/Enumeration": {
      "methods": {
        "hasMoreElements()Z": {},
        "nextElement()Ljava/lang/Object;": {}
      }
    },
    "java/util/HashMap": {
      "hard wrap": true,
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;": {
          "wraps": "a0.setdefault(a1, a2)"
        }
      },
      "wraps": ":dict"
    },
    "java/util/HashSet": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "<init>(Ljava/util/Collection;)V": {
          "wraps": "setattr(a0, 'underlying', set(a1))"
        },
        "forEach(Ljava/util/function/Consumer;)V": {
          "wraps": "list(map(a1, a0 if not hasattr(a0, 'underlying') else a0.underlying)) == 0"
        }
      },
      "wraps": ":set"
    },
    "java/util/IdentityHashMap": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "forEach(Ljava/util/function/BiConsumer;)V": {
          "wraps": "list(map(a1, a0.items())) if isinstance(a0, dict) else None"
        }
      }
    },
    "java/util/Iterator": {
      "methods": {
        "hasNext()Z": {
          "wraps": "len(list(__import__('copy').copy(a0))) > 0"
        },
        "next()Ljava/lang/Object;": {
          "wraps": "next(a0)"
        }
      }
    },
    "java/util/LinkedHashSet": {
      "methods": {
        "<init>()V": {},
        "add(Ljava/lang/Object;)Z": {}
      }
    },
    "java/util/LinkedList": {
      "methods": {
        "<init>()V": {}
      }
    },
    "java/util/List": {
      "hard wrap": true,
      "methods": {
        "add(Ljava/lang/Object;)Z": {
          "wraps": "(a0.underlying.append(a1) if not isinstance(a0, list) else a0.append(a1)) or True"
        },
        "get(I)Ljava/lang/Object;": {
          "wraps": "a0[a1]"
        },
        "isEmpty()Z": {},
        "iterator()Ljava/util/Iterator;": {
          "wraps": "iter(a0) if isinstance(a0, list) else iter(a0.underlying)"
        },
        "removeIf(Ljava/util/function/Predicate;)Z": {},
        "size()I": {
          "wraps": "len(a0)"
        },
        "stream()Ljava/util/stream/Stream;": {
          "wraps": "iter(a0) if isinstance(a0, list) else iter(a0.underlying)"
        }
      },
      "wraps": ":list"
    },
    "java/util/Locale": {
      "attributes": {
        "US": {
          "access": "static enum"
        }
      },
      "class type": "enum"
    },
    "java/util/Map": {
      "hard wrap": true,
      "methods": {
        "computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;": {
          "wraps": "a0.setdefault(a1, a2()) if a1 not in a0 else a0[a1]"
        },
        "containsKey(Ljava/lang/Object;)Z": {
          "wraps": "a1 in a0"
        },
        "entrySet()Ljava/util/Set;": {
          "wraps": "list(a0.items())"
        },
        "get(Ljava/lang/Object;)Ljava/lang/Object;": {
          "wraps": "a0[a1]"
        },
        "getOrDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;": {
          "wraps": "a0.setdefault(a1, a2)"
        },
        "isEmpty()Z": {
          "wraps": "len(a0) == 0"
        },
        "put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;": {
          "wraps": "a0.setdefault(a1, a2)"
        },
        "size()I": {
          "wraps": "len(a0)"
        },
        "values()Ljava/util/Collection;": {
          "wraps": "list(a0.values())"
        }
      },
      "wraps": ":dict"
    },
    "java/util/Map$Entry": {
      "methods": {
        "getKey()Ljava/lang/Object;": {
          "wraps": "a0[0]"
        },
        "getValue()Ljava/lang/Object;": {
          "wraps": "a0[1]"
        }
      }
    },
    "java/util/Objects": {
      "methods": {
        "requireNonNull(Ljava/lang/Object;)Ljava/lang/Object;": {}
      }
    },
    "java/util/Optional": {
      "methods": {
        "empty()Ljava/util/Optional;": {
          "wraps": "None"
        }
      }
    },
    "java/util/Queue": {
      "methods": {
        "isEmpty()Z": {
          "wraps": "True"
        }
      }
    },
    "java/util/Random": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "nextInt(I)I": {
          "wraps": "__import__('random').randint(0, a1-1)"
        }
      }
    },
    "java/util/ServiceLoader": {
      "methods": {
        "iterator()Ljava/util/Iterator;": {
          "wraps": "tuple()"
        },
        "load(Ljava/lang/Class;)Ljava/util/ServiceLoader;": {}
      }
    },
    "java/util/Set": {
      "methods": {
        "add(Ljava/lang/Object;)Z": {},
        "forEach(Ljava/util/function/Consumer;)V": {
          "wraps": "list(map(a1, a0)) == 0"
        },
        "iterator()Ljava/util/Iterator;": {
          "wraps": "iter(a0)"
        },
        "stream()Ljava/util/stream/Stream;": {
          "wraps": "iter(a0)"
        }
      }
    },
    "java/util/TreeMap": {
      "methods": {
        "containsKey(Ljava/lang/Object;)Z": {
          "wraps": "a1 in a0"
        },
        "entrySet()Ljava/util/Set;": {
          "wraps": "list(a0.items())"
        },
        "get(Ljava/lang/Object;)Ljava/lang/Object;": {
          "wraps": "a0[a1]"
        },
        "put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;": {
          "wraps": "a0.setdefault(a1, a2)"
        }
      }
    },
    "java/util/TreeSet": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "add(Ljava/lang/Object;)Z": {}
      },
      "wraps": ":set"
    },
    "java/util/UUID": {
      "methods": {
        "fromString(Ljava/lang/String;)Ljava/util/UUID;": {
          "wraps": "__import__('uuid').UUID(a0)"
        }
      }
    },
    "java/util/WeakHashMap": {
      "methods": {
        "<init>()V": {
          "no effect": true
        },
        "computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;": {
          "wraps": "(a0.setdefault(a1, a2()) if a1 not in a0 else a0[a1]) if isinstance(a0, dict) else a2()"
        }
      }
    },
    "java/util/concurrent/ConcurrentHashMap": {
      "methods": {
        "<init>()V": {
          "no effect": true
        }
      }
    },
    "java/util/concurrent/ConcurrentLinkedQueue": {
      "methods": {
        "<init>()V": {
          "no effect": true
        }
      }
    },
    "java/util/concurrent/LinkedBlockingQueue": {
      "methods": {
        "<init>()V": {
          "no effect": true
        }
      }
    },
    "java/util/concurrent/atomic/AtomicInteger": {
      "hard wrap": true,
      "methods": {
        "<init>(I)V": {
          "wraps": "setattr(a0, 'underlying', a1)"
        },
        "getAndIncrement()I": {
          "wraps": "setattr(a0, 'underlying', getattr(a0, 'underlying') + 1) or getattr(a0, 'underlying') - 1"
        }
      },
      "wraps": ":int"
    },
    "java/util/concurrent/atomic/AtomicIntegerFieldUpdater": {
      "methods": {
        "newUpdater(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;": {}
      }
    },
    "java/util/concurrent/atomic/AtomicReferenceFieldUpdater": {
      "methods": {
        "newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;": {}
      }
    },
    "java/util/function/BiPredicate": {},
    "java/util/function/Consumer": {
      "methods": {
        "accept(Ljava/lang/Object;)V": {
          "wraps": "a0(a1)"
        }
      }
    },
    "java/util/function/Function": {},
    "java/util/function/Predicate": {
      "wraps": "typing:Callable"
    },
    "java/util/function/Supplier": {
      "wraps": "typing:Callable"
    },
    "java/util/stream/Collectors": {
      "methods": {
        "joining(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;": {
          "wraps": "lambda stream: a[0].join(stream)"
        }
      }
    },
    "java/util/stream/Stream": {
      "methods": {
        "allMatch(Ljava/util/function/Predicate;)Z": {
          "wraps": "all(map(a1, a0))"
        },
        "collect(Ljava/util/stream/Collector;)Ljava/lang/Object;": {
          "wraps": "a[1](a[0])"
        },
        "distinct()Ljava/util/stream/Stream;": {},
        "forEach(Ljava/util/function/Consumer;)V": {},
        "map(Ljava/util/function/Function;)Ljava/util/stream/Stream;": {
          "wraps": "(a1(e) for e in a0)"
        }
      }
    },
    "javax/annotation/OverridingMethodsMustInvokeSuper": {
      "annotation": "track"
    },
    "javax/annotation/meta/TypeQualifier": {
      "annotation": "track"
    }
  },
  "implementation": [
    "java.lang",
    "java.util"
  ]
}