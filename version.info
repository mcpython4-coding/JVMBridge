[uuk]: created this repository to host the jvm code, before developed as part of the main repository
       below now the changelog before the move
[uuk]: implemented a basic JVM in python for loading java bytecode
[uuk]: implemented extension point for the javafml mod loader using the JVM
[uuk]: the javafml mod loader is build to support BiomesOPlenty build 1.16.5-13.0.1.0.465, any other mod may work,
       or may not. Feel free to write an extension library for the bridge system
[uuk]: implemented JVM -> BlockFactory transformer
[uuk]: JavaFML will now load all classes in class path of the mod
[uuk]: JavaFML will now remember which mod is currently active making other mods in theory work
[uuk]: bumped test version of biomesoplenty to 1.16.5-13.1.0.469
[uuk]: added some parsing for the BlockProperty stuff
[uuk]: fixed Runtime.run_method not returning for non-native methods the return value, resulting into None to be always
       pushed back onto the stack
[uuk]: fixed Blocks.func_235430_a_() not setting Block$Properties
[uuk]: added base injection point for items
[uuk]: items are now using the ItemGroup correctly
[uuk]: made it possible to register classes only for a certain "version", meaning other versions cannot access it
       [can be used to implement another mod loader version / type]
       This allows in the future to load 1.17 mods in parallel to 1.16.5 mods
[uuk]: implemented non-gui attachable debugger for methods
[uuk]: cleaned up exception printing by using our own text collector for jvm exceptions
[uuk]: fixed resolving of invokedynamic instruction
[uuk]: fixed StairsBlocks not correctly getting resolved
[uuk]: fixed factory transformer not using fence and fence gate base classes correctly
[uuk]: fixed calling func_200948_a breaking blocks [wrong property setting]
[uuk]: added debug flag --fill-unknown-natives for auto-filling native methods in-memory
[uuk]: added some more debug info
[uuk]: instructions can now be validated
[uuk]: WARNING: the JVM is now starting to get natives which can DAMAGE your system!
[uuk]: fixed invokevirtual on abstract methods
[uuk]. fixed invokedynamic when passing additional parameters to the method
[uuk]: added a continue button to the loading exception screen to continue mod loading even if an error occurred,
       resuming where we stopped loading
[uuk]: fixed invokedynamic with pre-args not returning the method result correctly
[uuk]: instructions can now modify the data cache created during decode() during runtime
[uuk]: InvokeDynamic will now cache the result of its method resolving
[uuk]: InvokeDynamic is now using the "optimiser" system to split of the variants of targets into smaller bits
[uuk]: hopefully fixed last InvokeDynamic miss-behaviours around binding constructors
[uuk]: class files can now be validated after load [as part of the bake process].
       Validation currently does only work on the access flags which are now allowed in some cases
[uuk]: native methods can now specify if they are static or not
[uuk]: fixed tableswitch instruction
[uuk]: fixed InvokeDynamic on abstact methods and on signature expansion
[uuk]: exported java jvm with bridge and built-ins into separate repository
[uuk]: added __main__.py file for launching .jar archives outside
[uuk]: fixed some libraries not being included in git
[uuk]: implemented helper system for changing bytecode sections and chaning bytecode offsets in the instructions around
       to the correct new values
[uuk]: compare instructions use now a common base class removing duplicated code
[uuk]: some work on mixin processor system
[uuk]: added processor for method annotations
[uuk]: added system to runtime-inject methods
[uuk]: on_annotate missing implementations are now skipped when not debugging vm
[uuk]: fixed 2-entry long entries in method calls not getting stored correctly in local vars
[uuk]: instructions using jump offsets validate the offset now at runtime
[uuk]: tableswitch and lookupswitch are now using also the validation system
[uuk]: stack flow check system is now in place validating stack operations during default validation
[uuk]: fixed LookupSwitch offset calculation
[uuk]: restructured some internals
[uuk]: fixed lookupswitch instruction decoding being wrong resulting into invalid jump offsets
[uuk]: hopefully fixed some registration event stuff
[uuk]: native class instances may hash themself now
[uuk]: non-arrival registries are now "lambda: None"'s instead of "None"'s, as some mods do null checks and they break
       here...
[uuk]: fixed up COFHCore failing in its deferred registry system due to above behaviour miss-match
[uuk]: Method.apply(Object, Object) was not working correctly leading into some issues
[uuk]: made the vm ready for the new mod loader layout
[uuk]: rewritten internal native system, using now json meta files as source definitions,
       but also allowing python source code injection via an annotation API
[uuk]: moved instruction definitions to separate file
[uuk]: added more abstract base classes for extending the current system with own implementations
[uuk]: added infrastructure to transform java bytecode to python bytecode
[uuk]: added NestHost and NestMembers attribute parsers
[uuk]: added more support for java 16 and mc 1.17.1
[uuk]: added parser for the Signature attribute
[uuk]: fixed arrays not getting version attribute from their parent class passed during construction
[uuk]: added infrastructure for forge versions < 1.13

tasks to do [maybe moved away for later]:
- minifier task should minify builtin & bridge library into each only one file
- a test system for testing mods & mod-packs against mcpython-4
- a system to export code portions as "subroutines" & a special invoke instruction, this needs:
    - a code walker for deciding if instructions are jump-targets
    - a code walker for deciding which portions of code should get sub-routine-d, including a system to transform
        such code into python-native code where possible
- a code walker to shorten code by removing NOOP's & resolving the jumps to the new destinations
- maybe decoded instructions store their following instruction instead of the offset?
- a code walker with a special instruction set for mc-specific instructions (shared.world access, current player, etc.) and
    generic optimisation instructions (new with constructor call in ones)
- a system to generate .class files from the in-memory stuff, including a reversal of the non-default instructions
- make versions 1.13 and up all compatible with the code
- split of instruction definitions from the Runtime system
- add system to walk across code from outside
* - add instruction for invoking stack object directly and not across a java/util/function/... class call
* - all array/list/set/map stuff can be optimised directly into native code (-> special instructions)
- StackUnderflowException after an InvokeDynamic might be caused by it, so we need some special handling

Currently testing:
AllTheMods6 version 1.6.13

What to do with this:
- make it load all mods [yes, including the ones requiring scala loading extension]
- fix the path generation (see json decoder errors in log)
- implement java bytecode -> python bytecode transformer & test it on the mod set
- count the method calls and after X calls, transform it to python bytecode for optimisation
- implement the runtime events & other loading events
- more integration work
